(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[0],{26:function(n,s,a){"use strict";a.r(s);var t=a(1),p=a(67),o=a.n(p);s.default=function(){return t.createElement(o.a,{renderContent:function(){return t.createElement("div",{className:"markdown-body section",dangerouslySetInnerHTML:{__html:'<blockquote>\n<p>What I cannot create, I do not understand. —— Feynman</p>\n</blockquote>\n<p><code>HellDoc</code>就是我拿来理解<a href="https://github.com/vuejs/vuepress/blob/master/"><code>vuepress</code></a>工作方式的一个玩具项目。开发的过程中遇到的问题正是我学习的机会，下面是一些我在这之前所不熟悉或事一知半解的内容:</p>\n<h2 id="so">So...</h2>\n<h3 id="1-markdown-文件修改的即时更新">1. Markdown 文件修改的即时更新</h3>\n<p>vuepress 会把收集到的 md 文件通过 <a href="https://github.com/vuejs/vuepress/blob/master/packages/%40vuepress/markdown-loader/index.js"><code>markdown-loader</code></a> 编译成一个个的 vue 组件，并且生成一个包括了这些组件的文档应用的 route 文件。</p>\n<p>在这个基础上，<code>*.md</code>文件的修改理所当然得会被 webpack 自动捕捉到（因为已经在上面生成的 route 的依赖列表里了）；而对于目录上的文件增删则是用<a href="https://github.com/paulmillr/chokidar"><code>chokidar</code></a>做了文件目录的 watch，触发的时候重新渲染<code>router</code>文件</p>\n<p>值得一提的是，在修改<code>config.js</code>这样的配置文件的时候：因为 nodejs 对 js-module 做了缓存的原因，无法触发文件更新，这时候就需要把<code>require.cache[absoluteFilePath]</code>的缓存内容删除，然后再进行后续的文档 App 部分的更新。</p>\n<h3 id="2-非常友好的-logger-提示">2. 非常友好的 Logger 提示</h3>\n<p>vuepress 中让我觉得特别友好的 log 提示是怎么做到的</p>\n<ol>\n<li>@vuepress/logger 统一的 logger 模块</li>\n<li><a href="https://github.com/nuxt/webpackbar">webpackbar</a> 给你更直观的编译信息</li>\n<li>在需要的生命周期中添加合理的<a href="https://github.com/vuejs/vuepress/blob/master/packages/%40vuepress/core/lib/webpack/DevLogPlugin.js">log 插件</a></li>\n</ol>\n<h3 id="3-devserver-的路由设置参考">3. DevServer 的路由设置参考</h3>\n<p>vuepress 的 dev 指令是在本地编写文档的时候使用的，你可以从这里学到一个 SPA 应用在测试的时候 webpackDevServer 如何设置最为<strong>自由</strong>,<strong>效率</strong></p>\n<pre><code class="language-javascript"><span class="token comment">// 摘自@vuepress/core dev.js</span>\n<span class="token keyword">const</span> serverConfig <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    clientLogLevel<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>\n    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    quiet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// vuepress里面的log都通过插件或自己处理了</span>\n    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"access-control-allow-origin"</span><span class="token punctuation">:</span> <span class="token string">"*"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    open<span class="token punctuation">:</span> cliOptions<span class="token punctuation">.</span>open<span class="token punctuation">,</span>\n    publicPath<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>base<span class="token punctuation">,</span>\n    watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ignored<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`!</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>tempPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**`</span></span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      disableDotRule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/./</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    overlay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    host<span class="token punctuation">,</span>\n    contentBase<span class="token punctuation">,</span>\n    <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>contentBase<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>contentBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      ctx<span class="token punctuation">.</span>pluginAPI<span class="token punctuation">.</span>options<span class="token punctuation">.</span>beforeDevServer<span class="token punctuation">.</span><span class="token function">syncApply</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ctx<span class="token punctuation">.</span>pluginAPI<span class="token punctuation">.</span>options<span class="token punctuation">.</span>afterDevServer<span class="token punctuation">.</span><span class="token function">syncApply</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ctx<span class="token punctuation">.</span>siteConfig<span class="token punctuation">.</span>devServer <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="4-ts-check-ts-ignore">4. @ts-check, @ts-ignore</h3>\n<p>在抽离为Hell服务的皮肤模块的时候，我意识到不需要那么严格的类型检查。通过<code>@ts-ignore</code>去忽略一些运行时添加的数据模块的<code>import</code>检查，后续再添加一些需要的类型(但实际上是一种无奈之举);<code>@ts-check</code>则相反，是给js文件带来一定的类型推导功能。</p>\n<h3 id="5-webpack如何模拟模块机制">5. webpack如何模拟模块机制</h3>\n<p>TODO</p>\n<h3 id="ova">OVA</h3>\n<p>因为自己是 TS 用户，顺手帮社区补全了一下<a href="https://github.com/neutrinojs/webpack-chain/pull/132"><code>webpack-chian</code></a>的类型声明文件。</p>\n<p>: )</p>\n'}})}})}},67:function(n,s,a){"use strict";var t=this&&this.__assign||function(){return(t=Object.assign||function(n){for(var s,a=1,t=arguments.length;a<t;a++)for(var p in s=arguments[a])Object.prototype.hasOwnProperty.call(s,p)&&(n[p]=s[p]);return n}).apply(this,arguments)};s.__esModule=!0;var p=a(1),o=a(25),e=a(14),c=a(68);s.default=c.withRouter(function(n){var s,a=e.siteData.pages.find(function(s){return s.path===n.match.path})||{path:"",component:""},c=e.layouts[(s="Layout",a.frontmatter&&a.frontmatter.layout&&(s=a.frontmatter.layout),s)];return p.createElement(o.PageDataContext.Provider,{value:a},p.createElement(c,t({},n)))})},68:function(n,s,a){"use strict";a.r(s);var t=a(18);a.d(s,"MemoryRouter",function(){return t.a});var p=a(19);a.d(s,"Prompt",function(){return p.a});var o=a(20);a.d(s,"Redirect",function(){return o.a});var e=a(10);a.d(s,"Route",function(){return e.a});var c=a(6);a.d(s,"Router",function(){return c.a});var u=a(21);a.d(s,"StaticRouter",function(){return u.a});var i=a(22);a.d(s,"Switch",function(){return i.a});var l=a(9);a.d(s,"generatePath",function(){return l.a});var r=a(7);a.d(s,"matchPath",function(){return r.a});var k=a(23);a.d(s,"withRouter",function(){return k.a})}}]);