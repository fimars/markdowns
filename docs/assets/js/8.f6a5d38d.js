(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{46:function(e,t,n){"use strict";n.r(t);var o=n(1),r=n(47),l=n.n(r),i=n(48),p=n.n(i),a=function(){return o.createElement("div",{className:"markdown-body section",dangerouslySetInnerHTML:{__html:'<h2 id="typescript-28-news">TypeScript 2.8 News</h2>\n<h3 id="context">Context</h3>\n<p>之前看了一篇关于Vuex类型的文章，发现其中很多的功能都是TS2.8更新加入的特性；刚好前几天看到一个写的非常好的博客(文末的TypeScript Evolution)，决定在这里做一个记录。</p>\n<h3 id="conditional-type">Conditional Type</h3>\n<h4 id="0x00">0x00</h4>\n<p>条件类型的判断有点像<code>instance of</code>，写法如下：</p>\n<pre><code class="language-typescript">T extends U ? X : Y</code></pre>\n<p>语法上就是JavaScript中常见的条件表达式, <code>T</code> <code>U</code> <code>X</code> <code>Y</code> 代表任意类型。如你所见<code>T extends U</code>部分描述了<code>T</code>是否可以从<code>U</code>中扩展出来, 然后满足条件的话得到类型<code>X</code>, 否则得到 <code>Y</code>。</p>\n<p>我们可以看一下lib.es5.d.ts里面预定义的<code>NonNullable</code>的写法学习一下:</p>\n<pre><code class="language-typescript">type NonNullable&lt;T&gt; = T extends null | undefined ? never : T;</code></pre>\n<p>如上所示，如果传入的类型<code>T</code>能够从<code>null | undefined</code>里扩展出来(即是空值)，那么就返回<code>never</code>, 反之则正常。</p>\n<h4 id="0x01">0x01</h4>\n<p><code>NonNullable</code>的一个使用场景(来自文末的typescript evolution):</p>\n<pre><code class="language-typescript">type EmailAddress = string | string[] null | undefined;\n// 然后我们对他NonNullable并展开过程\ntype NonNullableEmailAddress = NonNullable&lt;EmailAddress&gt;;\ntype NonNullableEmailAddress = NonNullable&lt;\n    | string\n    | string[]\n    | null\n    | undefined\n&gt;;\n// 注意这一步是这样展开的\ntype NonNullableEmailAddress = \n    | NonNullable&lt;string&gt; // string\n    | NonNullable&lt;string[]&gt; // string[]\n    | NonNullable&lt;null&gt; // never\n    | NonNullable&lt;undefined&gt; // never\n;\n// never因为是所有类型的子类型，在unnion type中我们可以忽略掉它\ntype NonNullableEmailAddress = string | string[];</code></pre>\n<h3 id="mapped-type-modifiers">Mapped Type Modifiers</h3>\n<h4 id="0x10">0x10</h4>\n<p>这个要说一下2.8带来的相关新预定义类型：<code>Partical&lt;T&gt;</code>, <code>Required&lt;T&gt;</code>等;</p>\n<p>首先有一个这样的<code>interface</code></p>\n<pre><code class="language-typescript">interface TodoItem {\n    description: string;\n    priority?: &quot;high&quot; | &quot;medium&quot; | &quot;low&quot;;\n}</code></pre>\n<p>如果你需要把这个TodoItem的字段都变成必填的，很简单，你只需要使用keyof关键字取出所有的字段，再使用<code>-?</code>操作符去掉可选条件，然后简单得重新声明一下就好了。如下所示:</p>\n<pre><code class="language-typescript">type RequiredTodoItem = {\n    [K in keyof TodoItem]-?: TodoItem[K] \n}</code></pre>\n<p>至于上面提到的<code>Required</code>关键字呢，就是做一模一样的事情的，所以你也可以这样子：</p>\n<pre><code class="language-typescript">type RTodoItem = Required&lt;TodoItem&gt;; // awesome</code></pre>\n<p>留意<code>[K in keyof T]</code>这部分，TS2.8的中所提供的Mapped Type Modifiers都是这类操作。</p>\n<h4 id="0x11">0x11</h4>\n<p>我们再看看一个结合了<code>extends ? :</code>的预定义类型的例子, 用来帮助我们提取<code>interface</code>中不可为空的属性；(来自文末的typescript evolution):</p>\n<p>首先有这样一个提取不可为空的<code>Keys</code>的类型:</p>\n<pre><code class="language-typescript">type NonNullablePropertyKeys&lt;T&gt; = {\n  [P in keyof T]: null extends T[P] ? never : P\n}[keyof T];</code></pre>\n<p>我们传入一个<code>interface</code>然后一步步展开:</p>\n<pre><code class="language-typescript">type User = {\n    name: string;\n    email: string | null;\n}\ntype NonNullablePropertyKeys = NonNullablePropertyKeys&lt;User&gt;;\ntype NonNullablePropertyKeys = {\n    [P in keyof User]: null extends User[P] ? never : P\n}[keyof User];\n\n// keyof User = &quot;name&quot; | &quot;email&quot;\n// 再展开: \n// [P in &quot;name&quot; | &quot;email&quot;]: Type[P] = \n// { name: Type[&quot;name&quot;], email: Type[&quot;email&quot;] }\n\ntype NonNullableUserPropertyKeys = {\n  name: null extends User[&quot;name&quot;] ? never : &quot;name&quot;;\n  email: null extends User[&quot;email&quot;] ? never : &quot;email&quot;;\n}[keyof User];\n\ntype NonNullableUserPropertyKeys = {\n  name: &quot;name&quot;; // =&gt; | { name:&quot;&quot;name&quot;, email: never }[&quot;name&quot;]\n  email: never; // =&gt; | { name:&quot;&quot;name&quot;, email: never }[&quot;email&quot;]\n}[&quot;name&quot; | &quot;email&quot;];\n\ntype NonNullableUserPropertyKeys = &quot;name&quot; | never // 然后可以消除 never</code></pre>\n<p>我们再往前推进一步, 讲一下新的预定义类型 <code>Pick&lt;T, K extends keyof T&gt;</code> :</p>\n<pre><code class="language-typescript">/**\n * From T, pick a set of properties\n * whose keys are in the union K\n */\ntype Pick&lt;T, K extends keyof T&gt; = {\n  [P in K]: T[P];\n};\n\n// 结合上面的 NonNullablePropertyKeys\n\ntype NonNullableProperties&lt;T&gt; = Pick&lt;T, NonNullablePropertyKeys&lt;T&gt;&gt;\ntype NonNullableUserProperties = NonNullableProperties&lt;User&gt;;\n// { name: string } </code></pre>\n<p>great work~</p>\n<h4 id="0x12">0x12</h4>\n<p><code>infer</code>也是这次更新里面加入的一个条件类型用的关键字，用来声明类型变量的关键字。</p>\n<p>获取First-Type:</p>\n<pre><code class="language-typescript">type First&lt;T&gt; =\n  T extends [infer U, ...unknown[]]\n    ? U\n    : never;\n\ntype SomeTupleType = [string, number, boolean];\ntype FirstElementType = First&lt;SomeTupleType&gt;; // string</code></pre>\n<p>获取返回值类型:</p>\n<pre><code class="language-typescript">type ReturnType&lt;T&gt; =\n  T extends (...args: any[]) =&gt; infer R\n    ? R\n    : any;\n\ntype A = ReturnType&lt;() =&gt; string&gt;;         // string\ntype B = ReturnType&lt;() =&gt; () =&gt; any[]&gt;;    // () =&gt; any[]\ntype C = ReturnType&lt;typeof Math.random&gt;;   // number\ntype D = ReturnType&lt;typeof Array.isArray&gt;; // boolean</code></pre>\n<p>需要注意的地方是，infer声明只能在条件判断类型的<code>true</code>分支里面使用。</p>\n<h3 id="0xff">0xff</h3>\n<p>基于上述的更新内容, TS2.8+添加了不少好用的预定义类型，可以去更新日志里面翻一下看看具体的关键字。</p>\n<h3 id="相关资源">相关资源</h3>\n<ul>\n<li><p><a href="https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/">conditional-types-in-typescript</a> 这篇文章下面那个redux的例子是开始有了一些兴趣</p>\n</li>\n<li><p><a href="https://mariusschulz.com/blog/series/typescript-evolution">TypeScript Evolution Blog</a> 和更新日志的内容差不多</p>\n</li>\n<li><p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html">TS2.8更新日志</a> </p>\n</li>\n<li><p><a href="https://typescript-play.js.org/#code/JYOwLgpgTgZghgYwgAgCoHsAm6CSkC2yA3gFDLnKYQDOCUwADmMOiAFzLVj0gDmA3GQoN66emACeAfg4AiABbBe82cgA+yWfgiZgAV3yqNsgDboA7rMEBfEiQSsuyMFnQBGDhmx4IhALzEQuRUtPRMLOyaAIIxsgA0QcgiLOIScorKsiTWgvaOYM6uAEyerj7+gRSUNHSMzKxyAELNWbZ5IE4u2ADMpd4EyAGkVSG14Q2aAMLT8YnJYsCSHHogVDCgOtl2kgwoAApwUMxwJl64BG6DlRQA2gDSyKDIANYQEugwaGUEALoAtDIvv1fPcfjZthJdsgDkdgCczuUrgAlCAARz0wCgOgAPAiCAA+fhAA">TS Playground</a> Web TS Playground, 方便你随时折腾一下</p>\n</li>\n</ul>\n'}})};t.default=function(){return o.createElement(l.a,{Side:o.createElement(p.a,{headings:[{id:"TypeScript 2.8 News",level:2,parent:null,text:"TypeScript 2.8 News"},{id:"Context",level:3,parent:null,text:"Context"},{id:"Conditional Type",level:3,parent:null,text:"Conditional Type"},{id:"0x00",level:4,text:"0x00"},{id:"0x01",level:4,text:"0x01"},{id:"Mapped Type Modifiers",level:3,parent:null,text:"Mapped Type Modifiers"},{id:"0x10",level:4,text:"0x10"},{id:"0x11",level:4,text:"0x11"},{id:"0x12",level:4,text:"0x12"},{id:"0xff",level:3,parent:null,text:"0xff"},{id:"相关资源",level:3,parent:null,text:"相关资源"}]}),Content:o.createElement(a,null)})}},47:function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});t.__esModule=!0;var l=n(1),i=n(10),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this.props,t=e.Side,n=e.Content;return l.createElement("div",null,l.createElement("div",{className:"columns"},l.createElement("div",{className:"side "+(this.props.sideBarDisplay?"sidebar-open":"")},l.createElement("div",{className:"nav"},t)),l.createElement("div",{className:"content main"},n)))},t}(l.PureComponent);t.default=i.connect(function(e){return{sideBarDisplay:e.sideBarDisplay}})(p)},48:function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=this&&this.__assign||function(){return(l=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};t.__esModule=!0;var i=n(1),p=n(49),a=n(7),s=n(16),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this.props.heading;return i.createElement(p.default,{level:e.level},i.createElement(a.Link,l({},this.getLinkProps(e))))},t.prototype.getLinkProps=function(e){var t=e.text.replace(/\(.*\)/,"");return{dangerouslySetInnerHTML:{__html:t},replace:!1,to:"#"+encodeURIComponent(t)}},t}(i.PureComponent);function u(){return i.createElement("div",{className:"sidebar-top"},s.navs.map(function(e){var t=e.text,n=e.link;return i.createElement(a.Link,{key:t,to:n,className:"navstyle"},i.createElement("div",null,t))}))}function d(e){var t=e.headings;return i.createElement("div",{className:"sibar-bottom"},t.map(function(e){return i.createElement(c,{heading:e,key:e.id})}))}var y=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this.props.headings;return i.createElement("div",{className:"sidebar"},i.createElement(u,null),i.createElement(d,{headings:e}))},t}(i.Component);t.default=y},49:function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});t.__esModule=!0;var l=n(1),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this.props,t=e.level,n=e.children;return l.createElement("div",{className:"nav-label-item level-"+t+" "+(n&&"has-child")},n)},t}(l.Component);t.default=i}}]);