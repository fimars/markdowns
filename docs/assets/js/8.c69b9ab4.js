(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[8],{31:function(n,s,a){"use strict";a.r(s);var p=a(0),t=a.n(p),e=a(64),o=a.n(e);s.default=function(){return t.a.createElement(o.a,{renderContent:function(){return t.a.createElement("div",{className:"markdown-body section",dangerouslySetInnerHTML:{__html:'<h2 id="typescript-28-news">TypeScript 2.8 News</h2>\n<h3 id="context">Context</h3>\n<p>之前看了一篇关于Vuex类型的文章，发现其中很多的功能都是TS2.8更新加入的特性；刚好前几天看到一个写的非常好的博客(文末的TypeScript Evolution)，决定在这里做一个记录。</p>\n<h3 id="conditional-type">Conditional Type</h3>\n<h4 id="0x00">0x00</h4>\n<p>条件类型的判断有点像<code>instance of</code>，写法如下：</p>\n<pre><code class="language-typescript"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token punctuation">:</span> <span class="token constant">Y</span></code></pre>\n<p>语法上就是JavaScript中常见的条件表达式, <code>T</code> <code>U</code> <code>X</code> <code>Y</code> 代表任意类型。如你所见<code>T extends U</code>部分描述了<code>T</code>是否可以从<code>U</code>中扩展出来, 然后满足条件的话得到类型<code>X</code>, 否则得到 <code>Y</code>。</p>\n<p>我们可以看一下lib.es5.d.ts里面预定义的<code>NonNullable</code>的写法学习一下:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token operator">|</span> undefined <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>\n<p>如上所示，如果传入的类型<code>T</code>能够从<code>null | undefined</code>里扩展出来(即是空值)，那么就返回<code>never</code>, 反之则正常。</p>\n<h4 id="0x01">0x01</h4>\n<p><code>NonNullable</code>的一个使用场景(来自文末的typescript evolution):</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> EmailAddress <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n<span class="token comment">// 然后我们对他NonNullable并展开过程</span>\n<span class="token keyword">type</span> NonNullableEmailAddress <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>EmailAddress<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> NonNullableEmailAddress <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>\n    <span class="token operator">|</span> <span class="token builtin">string</span>\n    <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token operator">|</span> <span class="token keyword">null</span>\n    <span class="token operator">|</span> undefined\n<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// 注意这一步是这样展开的</span>\n<span class="token keyword">type</span> NonNullableEmailAddress <span class="token operator">=</span> \n    <span class="token operator">|</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token comment">// string</span>\n    <span class="token operator">|</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// string[]</span>\n    <span class="token operator">|</span> NonNullable<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span> <span class="token comment">// never</span>\n    <span class="token operator">|</span> NonNullable<span class="token operator">&lt;</span>undefined<span class="token operator">></span> <span class="token comment">// never</span>\n<span class="token punctuation">;</span>\n<span class="token comment">// never因为是所有类型的子类型，在unnion type中我们可以忽略掉它</span>\n<span class="token keyword">type</span> NonNullableEmailAddress <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<h3 id="mapped-type-modifiers">Mapped Type Modifiers</h3>\n<h4 id="0x10">0x10</h4>\n<p>这个要说一下2.8带来的相关新预定义类型：<code>Partical&lt;T&gt;</code>, <code>Required&lt;T&gt;</code>等;</p>\n<p>首先有一个这样的<code>interface</code></p>\n<pre><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">{</span>\n    description<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    priority<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">"high"</span> <span class="token operator">|</span> <span class="token string">"medium"</span> <span class="token operator">|</span> <span class="token string">"low"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>如果你需要把这个TodoItem的字段都变成必填的，很简单，你只需要使用keyof关键字取出所有的字段，再使用<code>-?</code>操作符去掉可选条件，然后简单得重新声明一下就好了。如下所示:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> RequiredTodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TodoItem<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> TodoItem<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> \n<span class="token punctuation">}</span></code></pre>\n<p>至于上面提到的<code>Required</code>关键字呢，就是做一模一样的事情的，所以你也可以这样子：</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> RTodoItem <span class="token operator">=</span> Required<span class="token operator">&lt;</span>TodoItem<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// awesome</span></code></pre>\n<p>留意<code>[K in keyof T]</code>这部分，TS2.8的中所提供的Mapped Type Modifiers都是这类操作。</p>\n<h4 id="0x11">0x11</h4>\n<p>我们再看看一个结合了<code>extends ? :</code>的预定义类型的例子, 用来帮助我们提取<code>interface</code>中不可为空的属性；(来自文末的typescript evolution):</p>\n<p>首先有这样一个提取不可为空的<code>Keys</code>的类型:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> NonNullablePropertyKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">P</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<p>我们传入一个<code>interface</code>然后一步步展开:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    email<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> NonNullablePropertyKeys <span class="token operator">=</span> NonNullablePropertyKeys<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> NonNullablePropertyKeys <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">P</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// keyof User = "name" | "email"</span>\n<span class="token comment">// 再展开: </span>\n<span class="token comment">// [P in "name" | "email"]: Type[P] = </span>\n<span class="token comment">// { name: Type["name"], email: Type["email"] }</span>\n\n<span class="token keyword">type</span> NonNullableUserPropertyKeys <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">;</span>\n  email<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token string">"email"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> NonNullableUserPropertyKeys <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">;</span> <span class="token comment">// => | { name:""name", email: never }["name"]</span>\n  email<span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span> <span class="token comment">// => | { name:""name", email: never }["email"]</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">"name"</span> <span class="token operator">|</span> <span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> NonNullableUserPropertyKeys <span class="token operator">=</span> <span class="token string">"name"</span> <span class="token operator">|</span> <span class="token builtin">never</span> <span class="token comment">// 然后可以消除 never</span></code></pre>\n<p>我们再往前推进一步, 讲一下新的预定义类型 <code>Pick&lt;T, K extends keyof T&gt;</code> :</p>\n<pre><code class="language-typescript"><span class="token comment">/**\n * From T, pick a set of properties\n * whose keys are in the union K\n */</span>\n<span class="token keyword">type</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 结合上面的 NonNullablePropertyKeys</span>\n\n<span class="token keyword">type</span> NonNullableProperties<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> NonNullablePropertyKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span>\n<span class="token keyword">type</span> NonNullableUserProperties <span class="token operator">=</span> NonNullableProperties<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// { name: string } </span></code></pre>\n<p>great work~</p>\n<h4 id="0x12">0x12</h4>\n<p><code>infer</code>也是这次更新里面加入的一个条件类型用的关键字，用来声明类型变量的关键字。</p>\n<p>获取First-Type:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> First<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token constant">U</span>\n    <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SomeTupleType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> FirstElementType <span class="token operator">=</span> First<span class="token operator">&lt;</span>SomeTupleType<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string</span></code></pre>\n<p>获取返回值类型:</p>\n<pre><code class="language-typescript"><span class="token keyword">type</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span>\n    <span class="token operator">?</span> <span class="token constant">R</span>\n    <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">A</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>         <span class="token comment">// string</span>\n<span class="token keyword">type</span> <span class="token constant">B</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment">// () => any[]</span>\n<span class="token keyword">type</span> <span class="token constant">C</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>random<span class="token operator">></span><span class="token punctuation">;</span>   <span class="token comment">// number</span>\n<span class="token keyword">type</span> <span class="token constant">D</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token builtin">Array</span><span class="token punctuation">.</span>isArray<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// boolean</span></code></pre>\n<p>需要注意的地方是，infer声明只能在条件判断类型的<code>true</code>分支里面使用。</p>\n<h3 id="0xff">0xff</h3>\n<p>基于上述的更新内容, TS2.8+添加了不少好用的预定义类型，可以去更新日志里面翻一下看看具体的关键字。</p>\n<h3 id="相关资源">相关资源</h3>\n<ul>\n<li><p><a href="https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/">conditional-types-in-typescript</a> 这篇文章下面那个redux的例子是开始有了一些兴趣</p>\n</li>\n<li><p><a href="https://mariusschulz.com/blog/series/typescript-evolution">TypeScript Evolution Blog</a> 和更新日志的内容差不多</p>\n</li>\n<li><p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html">TS2.8更新日志</a> </p>\n</li>\n<li><p><a href="https://typescript-play.js.org/#code/JYOwLgpgTgZghgYwgAgCoHsAm6CSkC2yA3gFDLnKYQDOCUwADmMOiAFzLVj0gDmA3GQoN66emACeAfg4AiABbBe82cgA+yWfgiZgAV3yqNsgDboA7rMEBfEiQSsuyMFnQBGDhmx4IhALzEQuRUtPRMLOyaAIIxsgA0QcgiLOIScorKsiTWgvaOYM6uAEyerj7+gRSUNHSMzKxyAELNWbZ5IE4u2ADMpd4EyAGkVSG14Q2aAMLT8YnJYsCSHHogVDCgOtl2kgwoAApwUMxwJl64BG6DlRQA2gDSyKDIANYQEugwaGUEALoAtDIvv1fPcfjZthJdsgDkdgCczuUrgAlCAARz0wCgOgAPAiCAA+fhAA">TS Playground</a> Web TS Playground, 方便你随时折腾一下</p>\n</li>\n</ul>\n'}})}})}},64:function(n,s,a){"use strict";var p=this&&this.__assign||function(){return(p=Object.assign||function(n){for(var s,a=1,p=arguments.length;a<p;a++)for(var t in s=arguments[a])Object.prototype.hasOwnProperty.call(s,t)&&(n[t]=s[t]);return n}).apply(this,arguments)},t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};s.__esModule=!0;var e=a(22),o=a(12),c=a(7),l=a(0),r=t(a(0));s.default=c.withRouter((function(n){var s=o.siteData.pages.find((function(s){return s.path===n.match.path}))||{path:"",component:""};l.useEffect((function(){s.title&&(console.log(s.title),document.title=s.title)}));var a,t=o.layouts[(a="Layout",s.frontmatter&&s.frontmatter.layout&&(a=s.frontmatter.layout),a)];return r.default.createElement(e.PageDataContext.Provider,{value:s},r.default.createElement(t,p({},n)))}))}}]);