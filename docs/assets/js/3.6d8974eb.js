(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{41:function(n,e,a){"use strict";a.r(e);var s=a(1),t=a(47),o=a.n(t),r=a(48),p=a.n(r),c=function(){return s.createElement("div",{className:"markdown-body section",dangerouslySetInnerHTML:{__html:'<h2 id="bash-guide-notes-📒">Bash Guide Notes 📒</h2>\n<blockquote>\n<p>Bash Guide: <a href="http://guide.bash.academy/expansions/">http://guide.bash.academy/expansions/</a></p>\n<p> The Chapter: Variables and Expansions</p>\n</blockquote>\n<p>今天也有在看Parcel和Parcel的代码，因为自己的项目用到了这个新的Bundler库，看到一个很有意思的<a href="https://github.com/parcel-bundler/parcel/issues/110#issuecomment-350259878">issue</a>。里面这个shell蛮有意思的。</p>\n<h3 id="路径扩展-pathname-expansion">路径扩展 (Pathname Expansion)</h3>\n<p>看个例子:</p>\n<pre><code class="language-bash">$ <span class="token function">cd</span> ~/Downloads\n$ <span class="token function">rm</span> -v *\nremoved <span class="token string">\'05 *****.ogg\'</span>\nremoved <span class="token string">\'07 *****.ogg\'</span>\n<span class="token variable">$ls</span>\n$</code></pre>\n<p><code>rm -v</code> 后面的<code>*</code>会匹配到<code>Downloads</code>下所有的文件，这套在bash上使用的扩展匹配符号被叫做<code>Glob</code>，下面这个表格来自<a href="http://guide.bash.academy/expansions/?=Pathname_Expansion#p1.1.0_4">原文</a>。</p>\n<table>\n<thead>\n<tr>\n<th>Glob</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>*</code></td>\n<td>匹配N个字符，N包括0</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配0 ~ 1个字符</td>\n</tr>\n<tr>\n<td><code>[characters]</code></td>\n<td>匹配一个字符，范围来自<code>[...]</code>中的内容，类似正则表达式的<code>[]</code></td>\n</tr>\n<tr>\n<td><code>[:classname:]</code></td>\n<td>类似上一个命令. 支持一系列模式，包括: <em>alnum</em>, <em>alpha</em>, <em>ascii</em>, <em>blank</em>, <em>cntrl</em>, <em>digit</em>, <em>graph</em>, <em>lower</em>, <em>print</em>, <em>punct</em>, <em>space</em>, <em>upper</em>, <em>word</em>, <em>xdigit</em></td>\n</tr>\n</tbody></table>\n<p>可以指令开启更多的glob匹配，具体就不列举了，大概是正则表达式常用的符号<a href="http://guide.bash.academy/expansions/?=Pathname_Expansion#p1.1.0_9">原文</a>。</p>\n<pre><code class="language-bash">$ <span class="token function">shopt</span> -s extglob</code></pre>\n<h3 id="-符号">~ 符号</h3>\n<p><code>echo ~</code> 就知道了, 指向你的<code>Home</code>目录</p>\n<h3 id="命令子句">命令子句</h3>\n<p>形式非常简单，看下面的例子，用<code>$(…)</code>来说明这是条命令子句。值得注意的是只能用在<strong>双引号</strong>内</p>\n<pre><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token string">"The File &lt;hello.txt>: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> hello.txt<span class="token variable">)</span></span>"</span></code></pre>\n<h3 id="re-use-code">Re-use Code</h3>\n<p>复用代码，是最基本的抽象。为了让我们从简单的命令中更进一步，必须开始思考如何 re-use 代码了。先从Bash的变量开始。</p>\n<h3 id="shell-变量">Shell 变量</h3>\n<p>基本形式</p>\n<pre><code class="language-bash"><span class="token comment"># error</span>\n$ name <span class="token operator">=</span> 1 <span class="token comment"># bash中的`=`左右两边是不允许出现空格的</span>\nbash: name: <span class="token function">command</span> not found\n\n<span class="token comment"># right</span>\n$ name<span class="token operator">=</span>1\n$ <span class="token keyword">echo</span> <span class="token variable">$name</span> <span class="token comment"># 通过`$`去获取变量</span>\n1 <span class="token comment"># result</span></code></pre>\n<p>还能用一下上面的命令子句</p>\n<pre><code class="language-bash">$ qiaqia<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> qiaqia.txt<span class="token variable">)</span></span>"</span> <span class="token comment"># good job</span></code></pre>\n<p>还能在字符串中插入变量 (即: Parameter Expansion)</p>\n<pre><code class="language-bash">$ name<span class="token operator">=</span><span class="token string">"hali bote"</span> time<span class="token operator">=</span>23.23\n$ <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$name</span>\'s current record is <span class="token variable">$times</span>."</span>\nhali bote<span class="token string">\'s current record is .\n$ echo "<span class="token variable">$name</span>\'</span>s current record is <span class="token variable">${time}</span>s."\nhali bote\'s current record is 23.23s.</code></pre>\n<h3 id="变量扩展-parameter-expansion">变量扩展 Parameter Expansion</h3>\n<p><strong>再次留意</strong>， <code>${variable}</code> 这个形式只能使用在<strong>双引号</strong>之间，接下来要比较详细得讲解一些扩展用法。</p>\n<p>我们来看一个例子</p>\n<pre><code class="language-bash">$ name<span class="token operator">=</span>Britta time<span class="token operator">=</span>23.73\n$ <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$name</span>\'s current record is <span class="token variable">${time%.*}</span> seconds and <span class="token variable">${time#*.}</span> hundredths."</span>\nBritta\'s current record is 23 seconds and 73 hundredths.\n$ <span class="token keyword">echo</span> <span class="token string">"PATH currently contains: <span class="token variable">${PATH//:/, }</span>"</span>\nPATH currently contains: /Users/lhunath/.bin, /usr/local/bin, /usr/bin, /bin, /usr/libexec\n\n<span class="token comment"># From Guide Bash</span></code></pre>\n<p>你可能留意到了<code>${}</code>中的一些特殊用法，<code>%</code>是从后向前匹配最小满足该形式的内容并删去，而<code>#</code>类似前者，不过是从前向后匹配。而下一句命令里的<code>//A/B</code>则是匹配所有满足A形式的内容替换成B。还有一些常见的可以看Bash-Guide的<a href="http://guide.bash.academy/expansions/?=Parameter_Expansion#p2.2.2_5">这个地方</a>，或者是下面的一个简单总结。</p>\n<pre><code class="language-bash"><span class="token comment"># 例子</span>\nurl<span class="token operator">=</span><span class="token string">"http://guide.bash.academy/expansions.html"</span>\n$ <span class="token keyword">echo</span> <span class="token string">"Result: <span class="token variable">${url#*/}</span>"</span> <span class="token comment"># 从开头开始，匹配满足*/的最小内容，并移除</span>\nResult: /guide.bash.academy/expansions.html\n\n$ <span class="token punctuation">..</span>.$<span class="token punctuation">{</span>url<span class="token comment">##*/}... # 两个##和一个#的区别在于，匹配的是满足情况的最大内容</span>\nResult: expansions.html\n\n<span class="token comment"># ${parameter$A} 是从后向前匹配并移除, $$即最大内容</span>\n\n<span class="token comment"># ${parameter/A/B} 是匹配第一个满足情况A的内容替换成B</span>\n<span class="token comment"># ${parameter//A/B} 则是匹配所有满足情况的替换</span>\n\n<span class="token comment"># ${parameter/#A/B} 是从__开头__匹配第一个满足情况A的替换成B</span>\n<span class="token comment"># ${parameter/%A/B} 则是从__结尾__匹配</span>\n\n<span class="token comment"># ${#parameter} 计算参数的长度</span>\n<span class="token comment"># ${parameter:start[:length]} start是截取开始的字符位置，length为截取长度，可省略或者是负数(负数即从后向前数)</span>\n\n<span class="token comment"># #{parameter[^|^^|,|,,][A]} 根据形式A(不传即匹配任意字符)去把参数转换成^(首个匹配到大写) ^^(所有匹配到大写) ,(首个匹配到小写) ,,(所有匹配到小写)</span></code></pre>\n<p>再次提醒，这些命令子句都只能使用在<strong>双引号</strong>之间!</p>\n<blockquote>\n<p>MMP bash guide 不更新了… 我得另谋出路</p>\n</blockquote>\n'}})};e.default=function(){return s.createElement(o.a,{Side:s.createElement(p.a,{headings:[{id:"Bash Guide Notes 📒",level:2,parent:null,text:"Bash Guide Notes 📒"},{id:"路径扩展 (Pathname Expansion)",level:3,parent:null,text:"路径扩展 (Pathname Expansion)"},{id:"~ 符号",level:3,parent:null,text:"~ 符号"},{id:"命令子句",level:3,parent:null,text:"命令子句"},{id:"Re-use Code",level:3,parent:null,text:"Re-use Code"},{id:"Shell 变量",level:3,parent:null,text:"Shell 变量"},{id:"变量扩展 Parameter Expansion",level:3,parent:null,text:"变量扩展 Parameter Expansion"}]}),Content:s.createElement(c,null)})}},47:function(n,e,a){"use strict";var s,t=this&&this.__extends||(s=function(n,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var a in e)e.hasOwnProperty(a)&&(n[a]=e[a])})(n,e)},function(n,e){function a(){this.constructor=n}s(n,e),n.prototype=null===e?Object.create(e):(a.prototype=e.prototype,new a)});e.__esModule=!0;var o=a(1),r=a(10),p=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return t(e,n),e.prototype.render=function(){var n=this.props,e=n.Side,a=n.Content;return o.createElement("div",null,o.createElement("div",{className:"columns"},o.createElement("div",{className:"side "+(this.props.sideBarDisplay?"sidebar-open":"")},o.createElement("div",{className:"nav"},e)),o.createElement("div",{className:"content main"},a)))},e}(o.PureComponent);e.default=r.connect(function(n){return{sideBarDisplay:n.sideBarDisplay}})(p)},48:function(n,e,a){"use strict";var s,t=this&&this.__extends||(s=function(n,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var a in e)e.hasOwnProperty(a)&&(n[a]=e[a])})(n,e)},function(n,e){function a(){this.constructor=n}s(n,e),n.prototype=null===e?Object.create(e):(a.prototype=e.prototype,new a)}),o=this&&this.__assign||function(){return(o=Object.assign||function(n){for(var e,a=1,s=arguments.length;a<s;a++)for(var t in e=arguments[a])Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}).apply(this,arguments)};e.__esModule=!0;var r=a(1),p=a(49),c=a(7),l=a(16),i=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return t(e,n),e.prototype.render=function(){var n=this.props.heading;return r.createElement(p.default,{level:n.level},r.createElement(c.Link,o({},this.getLinkProps(n))))},e.prototype.getLinkProps=function(n){var e=n.text.replace(/\(.*\)/,"");return{dangerouslySetInnerHTML:{__html:e},replace:!1,to:"#"+encodeURIComponent(e)}},e}(r.PureComponent);function d(){return r.createElement("div",{className:"sidebar-top"},l.navs.map(function(n){var e=n.text,a=n.link;return r.createElement(c.Link,{key:e,to:a,className:"navstyle"},r.createElement("div",null,e))}))}function u(n){var e=n.headings;return r.createElement("div",{className:"sibar-bottom"},e.map(function(n){return r.createElement(i,{heading:n,key:n.id})}))}var m=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return t(e,n),e.prototype.render=function(){var n=this.props.headings;return r.createElement("div",{className:"sidebar"},r.createElement(d,null),r.createElement(u,{headings:n}))},e}(r.Component);e.default=m},49:function(n,e,a){"use strict";var s,t=this&&this.__extends||(s=function(n,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var a in e)e.hasOwnProperty(a)&&(n[a]=e[a])})(n,e)},function(n,e){function a(){this.constructor=n}s(n,e),n.prototype=null===e?Object.create(e):(a.prototype=e.prototype,new a)});e.__esModule=!0;var o=a(1),r=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return t(e,n),e.prototype.render=function(){var n=this.props,e=n.level,a=n.children;return o.createElement("div",{className:"nav-label-item level-"+e+" "+(a&&"has-child")},a)},e}(o.Component);e.default=r}}]);